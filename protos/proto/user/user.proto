syntax = "proto3";

package user;

option go_package = "github.com/Kai120789/tarot_proto/protos/gen/go/user";

import "google/protobuf/timestamp.proto";

service User {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
    rpc GetUserData (GetUserDataRequest) returns (GetUserDataResponse);
    rpc GetUserSettings (GetUserSettingsRequest) returns (GetUserSettingsResponse);
    rpc UpdateUserSettings (UpdateUserSettingsRequest) returns (UpdateUserSettingsResponse);
    rpc SetUserBirthday (SetUserBirthdayRequest) returns (SetUserBirthdayResponse);
    rpc GetUserZodiacSign (GetUserZodiacSignRequest) returns (GetUserZodiacSignResponse);
    rpc GetCurrentDeckByUserId(GetCurrentDeckByUserIdRequest) returns (GetCurrentDeckByUserIdResponse);
	rpc GetAllDecksByUserId(GetAllDecksByUserIdRequest) returns (GetAllDecksByUserIdResponse);
	rpc SetUserCurrentDeck(SetUserCurrentDeckRequest) returns (SetUserCurrentDeckResponse);
	rpc UpdateUserAvailableDecks(UpdateUserAvailableDecksRequest) returns (UpdateUserAvailableDecksResponse);
    rpc GetCurrentThemeByUserId(GetCurrentThemeByUserIdRequest) returns (GetCurrentThemeByUserIdResponse);
	rpc GetAllThemesByUserId(GetAllThemesByUserIdRequest) returns (GetAllThemesByUserIdResponse);
	rpc SetUserCurrentTheme(SetUserCurrentThemeRequest) returns (SetUserCurrentThemeResponse);
	rpc UpdateUserAvailableThemes(UpdateUserAvailableThemesRequest) returns (UpdateUserAvailableThemesResponse);
}

message Deck {
  int64 id = 1;
  string deck_name = 2;
  string deck_description = 3;
}

message UserDeck {
  Deck deck = 1;
  bool is_available = 2;
}

message Theme {
  int64 id = 1;
  string theme_name = 2;
  string bg_image = 3;
  string color = 4;
}

message UserTheme {
  Deck theme = 1;
  bool is_available = 2;
}

message CreateUserRequest {
    int64 chat_id = 1;
    string username = 2;
    string first_name = 3;
    string last_name = 4;
    string language_code = 5;
    bool is_premium = 6;
    int64 friend_id = 7;
    string photo_url = 8;
}

message CreateUserResponse {
    int64 id = 1;
    int64 chat_id = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string language = 6;
    string avatar = 7;
    bool is_premium = 8;
    optional google.protobuf.Timestamp birthday = 9;
    optional int64 city_id = 10;
    optional int64 friend_id = 11;
    optional google.protobuf.Timestamp registration_date = 12;
    optional google.protobuf.Timestamp last_enter_date = 13;
}

message GetUserDataRequest {
    int64 id = 1;
}
message GetUserDataResponse {
    int64 id = 1;
    int64 chat_id = 2;
    string username = 3;
    string first_name = 4;
    string last_name = 5;
    string language = 6;
    string avatar = 7;
    bool is_premium = 8;
    optional google.protobuf.Timestamp birthday = 9;
    optional int64 city_id = 10;
    optional int64 friend_id = 11;
    optional google.protobuf.Timestamp registration_date = 12;
    optional google.protobuf.Timestamp last_enter_date = 13;
}

message GetUserSettingsRequest {
    int64 id = 1;
}
message GetUserSettingsResponse {
    bool is_subscribe = 1;
    bool is_horoscope_on = 2;
}

message UpdateUserSettingsRequest {
    int64 id = 1;
    bool is_subscribe = 2;
    bool is_horoscope_on = 3;
}
message UpdateUserSettingsResponse {
    bool is_subscribe = 1;
    bool is_horoscope_on = 2;
}

message SetUserBirthdayRequest {
    int64 id = 1;
    int64 day = 2;
    int64 month = 3;
    int64 year = 4;
}
message SetUserBirthdayResponse {}

message GetUserZodiacSignRequest {
    int64 id = 1;
}
message GetUserZodiacSignResponse {
    int64 id = 1;
    string sign_en = 2;
    string sign_ru = 3;
    string symbol = 4;
    google.protobuf.Timestamp start_date = 5;
    google.protobuf.Timestamp end_date = 6;
    string element = 7;
}

message GetCurrentDeckByUserIdRequest {
    int64 id = 1;
}

message GetCurrentDeckByUserIdResponse {
    Deck deck = 1;
}

message GetAllDecksByUserIdRequest {
    int64 id = 1;
}

message GetAllDecksByUserIdResponse {
    repeated UserDeck user_decks = 1;
}

message SetUserCurrentDeckRequest {
    int64 id = 1;
    int64 deck_id = 2;
}

message SetUserCurrentDeckResponse {
    Deck deck = 1;
}

message UpdateUserAvailableDecksRequest {
    int64 id = 1;
    int64 deck_id = 2;
}

message UpdateUserAvailableDecksResponse {
    repeated UserDeck user_decks = 1;
}

message GetCurrentThemeByUserIdRequest {
    int64 id = 1;
}

message GetCurrentThemeByUserIdResponse {
    Theme theme = 1;
}

message GetAllThemesByUserIdRequest {
    int64 id = 1;
}

message GetAllThemesByUserIdResponse {
    repeated UserTheme user_theme = 1;
}

message SetUserCurrentThemeRequest {
    int64 id = 1;
    int64 theme_id = 2;
}

message SetUserCurrentThemeResponse {
    Theme theme = 1;
}

message UpdateUserAvailableThemesRequest {
    int64 id = 1;
    int64 theme_id = 2;
}

message UpdateUserAvailableThemesResponse {
    repeated UserTheme user_themes = 1;
}
