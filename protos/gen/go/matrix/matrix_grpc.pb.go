// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: matrix/matrix.proto

package matrix

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matrix_CalculateSimpleMatrix_FullMethodName = "/matrix.Matrix/CalculateSimpleMatrix"
	Matrix_CalculateFullMatrix_FullMethodName   = "/matrix.Matrix/CalculateFullMatrix"
)

// MatrixClient is the client API for Matrix service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatrixClient interface {
	CalculateSimpleMatrix(ctx context.Context, in *CalculateSimpleMatrixRequest, opts ...grpc.CallOption) (*CalculateSimpleMatrixResponse, error)
	CalculateFullMatrix(ctx context.Context, in *CalculateFullMatrixRequest, opts ...grpc.CallOption) (*CalculateFullMatrixResponse, error)
}

type matrixClient struct {
	cc grpc.ClientConnInterface
}

func NewMatrixClient(cc grpc.ClientConnInterface) MatrixClient {
	return &matrixClient{cc}
}

func (c *matrixClient) CalculateSimpleMatrix(ctx context.Context, in *CalculateSimpleMatrixRequest, opts ...grpc.CallOption) (*CalculateSimpleMatrixResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateSimpleMatrixResponse)
	err := c.cc.Invoke(ctx, Matrix_CalculateSimpleMatrix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matrixClient) CalculateFullMatrix(ctx context.Context, in *CalculateFullMatrixRequest, opts ...grpc.CallOption) (*CalculateFullMatrixResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateFullMatrixResponse)
	err := c.cc.Invoke(ctx, Matrix_CalculateFullMatrix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatrixServer is the server API for Matrix service.
// All implementations must embed UnimplementedMatrixServer
// for forward compatibility.
type MatrixServer interface {
	CalculateSimpleMatrix(context.Context, *CalculateSimpleMatrixRequest) (*CalculateSimpleMatrixResponse, error)
	CalculateFullMatrix(context.Context, *CalculateFullMatrixRequest) (*CalculateFullMatrixResponse, error)
	mustEmbedUnimplementedMatrixServer()
}

// UnimplementedMatrixServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatrixServer struct{}

func (UnimplementedMatrixServer) CalculateSimpleMatrix(context.Context, *CalculateSimpleMatrixRequest) (*CalculateSimpleMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSimpleMatrix not implemented")
}
func (UnimplementedMatrixServer) CalculateFullMatrix(context.Context, *CalculateFullMatrixRequest) (*CalculateFullMatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFullMatrix not implemented")
}
func (UnimplementedMatrixServer) mustEmbedUnimplementedMatrixServer() {}
func (UnimplementedMatrixServer) testEmbeddedByValue()                {}

// UnsafeMatrixServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatrixServer will
// result in compilation errors.
type UnsafeMatrixServer interface {
	mustEmbedUnimplementedMatrixServer()
}

func RegisterMatrixServer(s grpc.ServiceRegistrar, srv MatrixServer) {
	// If the following call pancis, it indicates UnimplementedMatrixServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matrix_ServiceDesc, srv)
}

func _Matrix_CalculateSimpleMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSimpleMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatrixServer).CalculateSimpleMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matrix_CalculateSimpleMatrix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatrixServer).CalculateSimpleMatrix(ctx, req.(*CalculateSimpleMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matrix_CalculateFullMatrix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFullMatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatrixServer).CalculateFullMatrix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matrix_CalculateFullMatrix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatrixServer).CalculateFullMatrix(ctx, req.(*CalculateFullMatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matrix_ServiceDesc is the grpc.ServiceDesc for Matrix service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matrix_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matrix.Matrix",
	HandlerType: (*MatrixServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateSimpleMatrix",
			Handler:    _Matrix_CalculateSimpleMatrix_Handler,
		},
		{
			MethodName: "CalculateFullMatrix",
			Handler:    _Matrix_CalculateFullMatrix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matrix/matrix.proto",
}
