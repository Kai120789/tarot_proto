// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: cards/cards.proto

package cards

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cards_CreateSpread_FullMethodName        = "/cards.Cards/CreateSpread"
	Cards_GetOneSpread_FullMethodName        = "/cards.Cards/GetOneSpread"
	Cards_GetAllSpreads_FullMethodName       = "/cards.Cards/GetAllSpreads"
	Cards_ExpandSpread_FullMethodName        = "/cards.Cards/ExpandSpread"
	Cards_AddAdditionalSpread_FullMethodName = "/cards.Cards/AddAdditionalSpread"
)

// CardsClient is the client API for Cards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsClient interface {
	CreateSpread(ctx context.Context, in *CreateSpreadRequest, opts ...grpc.CallOption) (*CreateSpreadResponse, error)
	GetOneSpread(ctx context.Context, in *GetOneSpreadRequest, opts ...grpc.CallOption) (*GetOneSpreadResponse, error)
	GetAllSpreads(ctx context.Context, in *GetAllSpreadsRequest, opts ...grpc.CallOption) (*GetAllSpreadsResponse, error)
	ExpandSpread(ctx context.Context, in *ExpandSpreadRequest, opts ...grpc.CallOption) (*ExpandSpreadResponse, error)
	AddAdditionalSpread(ctx context.Context, in *AddAdditionalSpreadRequest, opts ...grpc.CallOption) (*AddAdditionalSpreadResponse, error)
}

type cardsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsClient(cc grpc.ClientConnInterface) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) CreateSpread(ctx context.Context, in *CreateSpreadRequest, opts ...grpc.CallOption) (*CreateSpreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSpreadResponse)
	err := c.cc.Invoke(ctx, Cards_CreateSpread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) GetOneSpread(ctx context.Context, in *GetOneSpreadRequest, opts ...grpc.CallOption) (*GetOneSpreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOneSpreadResponse)
	err := c.cc.Invoke(ctx, Cards_GetOneSpread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) GetAllSpreads(ctx context.Context, in *GetAllSpreadsRequest, opts ...grpc.CallOption) (*GetAllSpreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSpreadsResponse)
	err := c.cc.Invoke(ctx, Cards_GetAllSpreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) ExpandSpread(ctx context.Context, in *ExpandSpreadRequest, opts ...grpc.CallOption) (*ExpandSpreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandSpreadResponse)
	err := c.cc.Invoke(ctx, Cards_ExpandSpread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) AddAdditionalSpread(ctx context.Context, in *AddAdditionalSpreadRequest, opts ...grpc.CallOption) (*AddAdditionalSpreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAdditionalSpreadResponse)
	err := c.cc.Invoke(ctx, Cards_AddAdditionalSpread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServer is the server API for Cards service.
// All implementations must embed UnimplementedCardsServer
// for forward compatibility.
type CardsServer interface {
	CreateSpread(context.Context, *CreateSpreadRequest) (*CreateSpreadResponse, error)
	GetOneSpread(context.Context, *GetOneSpreadRequest) (*GetOneSpreadResponse, error)
	GetAllSpreads(context.Context, *GetAllSpreadsRequest) (*GetAllSpreadsResponse, error)
	ExpandSpread(context.Context, *ExpandSpreadRequest) (*ExpandSpreadResponse, error)
	AddAdditionalSpread(context.Context, *AddAdditionalSpreadRequest) (*AddAdditionalSpreadResponse, error)
	mustEmbedUnimplementedCardsServer()
}

// UnimplementedCardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsServer struct{}

func (UnimplementedCardsServer) CreateSpread(context.Context, *CreateSpreadRequest) (*CreateSpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpread not implemented")
}
func (UnimplementedCardsServer) GetOneSpread(context.Context, *GetOneSpreadRequest) (*GetOneSpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneSpread not implemented")
}
func (UnimplementedCardsServer) GetAllSpreads(context.Context, *GetAllSpreadsRequest) (*GetAllSpreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpreads not implemented")
}
func (UnimplementedCardsServer) ExpandSpread(context.Context, *ExpandSpreadRequest) (*ExpandSpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandSpread not implemented")
}
func (UnimplementedCardsServer) AddAdditionalSpread(context.Context, *AddAdditionalSpreadRequest) (*AddAdditionalSpreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdditionalSpread not implemented")
}
func (UnimplementedCardsServer) mustEmbedUnimplementedCardsServer() {}
func (UnimplementedCardsServer) testEmbeddedByValue()               {}

// UnsafeCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServer will
// result in compilation errors.
type UnsafeCardsServer interface {
	mustEmbedUnimplementedCardsServer()
}

func RegisterCardsServer(s grpc.ServiceRegistrar, srv CardsServer) {
	// If the following call pancis, it indicates UnimplementedCardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cards_ServiceDesc, srv)
}

func _Cards_CreateSpread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).CreateSpread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_CreateSpread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).CreateSpread(ctx, req.(*CreateSpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_GetOneSpread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneSpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).GetOneSpread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_GetOneSpread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).GetOneSpread(ctx, req.(*GetOneSpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_GetAllSpreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSpreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).GetAllSpreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_GetAllSpreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).GetAllSpreads(ctx, req.(*GetAllSpreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_ExpandSpread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandSpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).ExpandSpread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_ExpandSpread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).ExpandSpread(ctx, req.(*ExpandSpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_AddAdditionalSpread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdditionalSpreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).AddAdditionalSpread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_AddAdditionalSpread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).AddAdditionalSpread(ctx, req.(*AddAdditionalSpreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cards_ServiceDesc is the grpc.ServiceDesc for Cards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cards.Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpread",
			Handler:    _Cards_CreateSpread_Handler,
		},
		{
			MethodName: "GetOneSpread",
			Handler:    _Cards_GetOneSpread_Handler,
		},
		{
			MethodName: "GetAllSpreads",
			Handler:    _Cards_GetAllSpreads_Handler,
		},
		{
			MethodName: "ExpandSpread",
			Handler:    _Cards_ExpandSpread_Handler,
		},
		{
			MethodName: "AddAdditionalSpread",
			Handler:    _Cards_AddAdditionalSpread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cards/cards.proto",
}
